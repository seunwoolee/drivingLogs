Index: app/src/main/java/com/example/traveldriving/activity/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.traveldriving.activity;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.view.ActionMode;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.Manifest;\r\nimport android.Manifest.permission;\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Activity;\r\nimport android.app.PendingIntent;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.content.pm.PackageManager;\r\nimport android.location.Address;\r\nimport android.location.Geocoder;\r\nimport android.location.Location;\r\nimport android.location.LocationManager;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.os.Message;\r\nimport android.provider.Settings;\r\nimport android.util.Log;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.ImageButton;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport com.example.traveldriving.BuildConfig;\r\nimport com.example.traveldriving.R;\r\nimport com.example.traveldriving.adapter.AdapterListDrivingLog;\r\nimport com.example.traveldriving.broadCast.LocationUpdatesBroadcastReceiver;\r\nimport com.example.traveldriving.model.DrivingLog;\r\nimport com.example.traveldriving.model.MapPoint;\r\nimport com.example.traveldriving.service.MyService;\r\nimport com.example.traveldriving.utils.Tools;\r\nimport com.example.traveldriving.widget.LineItemDecoration;\r\nimport com.google.android.gms.location.FusedLocationProviderClient;\r\nimport com.google.android.gms.location.LocationRequest;\r\nimport com.google.android.gms.location.LocationServices;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\n\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.List;\r\n\r\nimport io.realm.Realm;\r\nimport io.realm.RealmList;\r\n\r\n\r\npublic class MainActivity extends AppCompatActivity {\r\n    private static final String TAG = \"AppCompatActivity\";\r\n    private static final int REQUEST_LOCATION_PERMISSION = 200;\r\n\r\n    private TextView mDrivingTime;\r\n    private TextView mDrivingDistance;\r\n    private RecyclerView mRecyclerView;\r\n\r\n    private Realm mRealm;\r\n    private Geocoder mGeocoder;\r\n    //    private TimerThread mStartTimerThread;\r\n    private LocationManager mLocationManager;\r\n    private AdapterListDrivingLog mAdapter;\r\n    private static Handler mHandler;\r\n    private BroadcastReceiver mapChangedBroadcastReceiver;\r\n    private BroadcastReceiver timerBroadcastReceiver;\r\n    private ActionModeCallback mActionModeCallback;\r\n    private ActionMode mActionMode;\r\n\r\n    private DrivingLog mDrivingLog = null;\r\n    private List<MapPoint> mMapPoints = null;\r\n\r\n    private static final long UPDATE_INTERVAL = 1000; // Every 60 seconds.\r\n    private static final long FASTEST_UPDATE_INTERVAL = 1000; // Every 30 seconds\r\n    private static final long MAX_WAIT_TIME = UPDATE_INTERVAL * 2; // Every 5 minutes.\r\n    private LocationRequest mLocationRequest;\r\n    private FusedLocationProviderClient mFusedLocationClient;\r\n\r\n    public void requestPermission() {\r\n        if (ActivityCompat.checkSelfPermission(this,\r\n                permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED &&\r\n                ActivityCompat.checkSelfPermission(this,\r\n                        permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED\r\n        ) {\r\n            ActivityCompat.requestPermissions(\r\n                    MainActivity.this,\r\n                    new String[]{permission.ACCESS_FINE_LOCATION, permission.ACCESS_COARSE_LOCATION},\r\n                    REQUEST_LOCATION_PERMISSION);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        Log.d(TAG, \"onResume\");\r\n\r\n        if (timerBroadcastReceiver == null) {\r\n            timerBroadcastReceiver = new BroadcastReceiver() {\r\n                @Override\r\n                public void onReceive(Context context, Intent intent) {\r\n                    Log.d(TAG, \"timerBroadcastReceiver\");\r\n                    Location lastKnownLocation = getLastKnownLocation();\r\n                    if(lastKnownLocation != null){\r\n                        MapPoint mapPoint = new MapPoint();\r\n                        mapPoint.setLatitude((Double) lastKnownLocation.getLatitude());\r\n                        mapPoint.setLongitude((Double) lastKnownLocation.getLongitude());\r\n                        mapPoint.setCurrentDate((Date) new Date(lastKnownLocation.getTime()));\r\n                        mMapPoints.add(mapPoint);\r\n                    }\r\n\r\n                    int hour = (int) intent.getExtras().get(\"hour\");\r\n                    int minute = (int) intent.getExtras().get(\"minute\");\r\n                    int second = (int) intent.getExtras().get(\"second\");\r\n                    String time = String.format(\"%02d\", hour) + \":\" + String.format(\"%02d\", minute) + \":\" + String.format(\"%02d\", second);\r\n                    mDrivingTime.setText(time);\r\n                    mDrivingDistance.setText(String.format(\"%d.%ckm\", (0 / 1000), String.valueOf(0 % 1000).charAt(0)));\r\n                }\r\n            };\r\n        }\r\n\r\n        registerReceiver(timerBroadcastReceiver, new IntentFilter(\"timer_update\"));\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n        Log.d(TAG, \"onDestroy\");\r\n        mRealm.close();\r\n    }\r\n\r\n\r\n\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n        boolean permissionToRecordAccepted = false;\r\n        if (requestCode == REQUEST_LOCATION_PERMISSION) {\r\n            permissionToRecordAccepted = grantResults[0] == PackageManager.PERMISSION_GRANTED;\r\n        }\r\n        if (!permissionToRecordAccepted){\r\n            Toast.makeText(MainActivity.this, \"권한이 거부되었습니다. 권한을 승인해주세요.\", Toast.LENGTH_LONG).show();\r\n            new Handler().postDelayed(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    Intent intent = new Intent();\r\n                    intent.setAction(\r\n                            Settings.ACTION_APPLICATION_DETAILS_SETTINGS);\r\n                    Uri uri = Uri.fromParts(\"package\",\r\n                            BuildConfig.APPLICATION_ID, null);\r\n                    intent.setData(uri);\r\n                    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n                    startActivity(intent);\r\n                    finish();\r\n                }\r\n            }, 1500);\r\n\r\n        }\r\n    }\r\n\r\n\r\n    @SuppressLint({\"SetTextI18n\", \"MissingPermission\"})\r\n    @RequiresApi(api = Build.VERSION_CODES.M)\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n\r\n        requestPermission();\r\n\r\n        mFusedLocationClient = LocationServices.getFusedLocationProviderClient(this);\r\n        createLocationRequest();\r\n        mFusedLocationClient.requestLocationUpdates(mLocationRequest, getPendingIntent());\r\n\r\n        Realm.init(this);\r\n        mRealm = Realm.getDefaultInstance();\r\n\r\n        initComponent();\r\n\r\n        mMapPoints = new ArrayList<MapPoint>();\r\n\r\n        ImageButton startBtn = findViewById(R.id.startBtn);\r\n        mDrivingTime = findViewById(R.id.drivingTime);\r\n        mDrivingDistance = findViewById(R.id.drivingDistance);\r\n        mLocationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);\r\n        mGeocoder = new Geocoder(this);\r\n\r\n        startBtn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                requestPermission();\r\n                if (mDrivingLog == null) {\r\n                    mDrivingLog = new DrivingLog();\r\n                    Context context = getApplicationContext();\r\n                    Intent intent = new Intent(context, MyService.class);\r\n                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n                        context.startForegroundService(intent);\r\n                    } else {\r\n                        startService(intent);\r\n                    }\r\n                    setStartLocation();\r\n                    List<Address> list;\r\n                    try {\r\n                        list = mGeocoder.getFromLocation(mDrivingLog.getStartLatitude(), mDrivingLog.getStartLongitude(), 1);\r\n                        if (list.size() > 0) {\r\n                            Toast.makeText(MainActivity.this, mDrivingLog.getReadableLocation(context, true), Toast.LENGTH_SHORT).show();\r\n                        } else {\r\n                            Toast.makeText(MainActivity.this, \"출발\", Toast.LENGTH_SHORT).show();\r\n                        }\r\n                    } catch (IOException e) {\r\n                        e.printStackTrace();\r\n                        Log.d(TAG, \"입출력 오류 - 서버에서 주소변환시 에러발생\");\r\n                    }\r\n\r\n                    startBtn.setImageResource(R.drawable.btn_stop);\r\n                } else {\r\n                    Context context = getApplicationContext();\r\n                    Intent intent = new Intent(context, MyService.class);\r\n                    stopService(intent);\r\n                    Toast.makeText(MainActivity.this, \"종료\", Toast.LENGTH_SHORT).show();\r\n                    mDrivingTime.setText(\"00:00:00\");\r\n                    mDrivingDistance.setText(\"0.0km\");\r\n                    startBtn.setImageResource(R.drawable.btn_start);\r\n                    mRealm.beginTransaction();\r\n                    Location lastKnownLocation = getLastKnownLocation();\r\n                    double latitude = lastKnownLocation.getLatitude();\r\n                    double longitude = lastKnownLocation.getLongitude();\r\n                    Date date = new Date(lastKnownLocation.getTime());\r\n                    mDrivingLog.setStopLatitude(latitude);\r\n                    mDrivingLog.setStopLongitude(longitude);\r\n                    mDrivingLog.setStopDate(date);\r\n\r\n                    DrivingLog newDrivingLog = mRealm.copyToRealm(mDrivingLog); // 비관리 객체를 영속화합니다\r\n\r\n                    RealmList<MapPoint> newMapPoints = new RealmList<>();\r\n                    for (int i = 0; i < mMapPoints.size(); i++) {\r\n                        MapPoint newMapPoint = mRealm.createObject(MapPoint.class);\r\n                        newMapPoint.setCurrentDate(mMapPoints.get(i).getCurrentDate());\r\n                        newMapPoint.setLatitude(mMapPoints.get(i).getLatitude());\r\n                        newMapPoint.setLongitude(mMapPoints.get(i).getLongitude());\r\n                        newMapPoints.add(newMapPoint);\r\n                    }\r\n\r\n                    newDrivingLog.setMapPoints(newMapPoints);\r\n                    mMapPoints = new ArrayList<MapPoint>();\r\n                    newMapPoints = null;\r\n                    mDrivingLog = null;\r\n\r\n                    mRealm.commitTransaction();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private void initComponent() {\r\n        mRecyclerView = (RecyclerView) findViewById(R.id.recyclerView);\r\n        mRecyclerView.setLayoutManager(new LinearLayoutManager(this));\r\n        mRecyclerView.addItemDecoration(new LineItemDecoration(this, LinearLayout.VERTICAL));\r\n        mRecyclerView.setHasFixedSize(true);\r\n\r\n        List<DrivingLog> items = mRealm.where(DrivingLog.class).findAll();\r\n\r\n        mAdapter = new AdapterListDrivingLog(this, items);\r\n        mRecyclerView.setAdapter(mAdapter);\r\n\r\n        mAdapter.setOnCheckBoxClickListener(new AdapterListDrivingLog.OnCheckboxClickListener() {\r\n            @Override\r\n            public void onItemClick(int pos) {\r\n                toggleSelection(pos);\r\n            }\r\n        });\r\n\r\n        mAdapter.setOnItemClickListener(new AdapterListDrivingLog.OnItemClickListener() {\r\n            @Override\r\n            public void onItemClick(View view, DrivingLog obj, int pos) {\r\n                if (mAdapter.getSelectedItemCount() > 0) {\r\n                    enableActionMode(pos);\r\n                } else {\r\n                    DrivingLog drivingLog = items.get(pos);\r\n                    Intent intent = new Intent(getApplicationContext(), MapsActivity.class);\r\n                    intent.putExtra(\"drivingLogId\", drivingLog.getId());\r\n                    startActivity(intent);\r\n                }\r\n\r\n            }\r\n        });\r\n\r\n        mAdapter.setOnMoreButtonClickListener(new AdapterListDrivingLog.OnMoreButtonClickListener() {\r\n            @Override\r\n            public void onItemClick(View view, DrivingLog obj, int pos) {\r\n                enableActionMode(pos);\r\n            }\r\n\r\n        });\r\n\r\n        mActionModeCallback = new ActionModeCallback();\r\n\r\n    }\r\n\r\n    private void enableActionMode(int position) {\r\n        if (mActionMode == null) {\r\n            mActionMode = startSupportActionMode(mActionModeCallback);\r\n\r\n        }\r\n        toggleSelection(position);\r\n    }\r\n\r\n    private void toggleSelection(int position) {\r\n        mAdapter.toggleSelection(position);\r\n        int count = mAdapter.getSelectedItemCount();\r\n\r\n        if (count == 0) {\r\n            mActionMode.finish();\r\n        } else {\r\n            mActionMode.invalidate();\r\n        }\r\n    }\r\n\r\n    private class ActionModeCallback implements ActionMode.Callback {\r\n        @Override\r\n        public boolean onCreateActionMode(ActionMode mode, Menu menu) {\r\n            mAdapter.setActionMode(true);\r\n            mAdapter.notifyDataSetChanged();\r\n            Tools.setSystemBarColor(MainActivity.this, R.color.blue_grey_700);\r\n            mode.getMenuInflater().inflate(R.menu.menu_delete, menu);\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        public boolean onPrepareActionMode(ActionMode mode, Menu menu) {\r\n            return false;\r\n        }\r\n\r\n        @Override\r\n        public boolean onActionItemClicked(ActionMode mode, MenuItem item) {\r\n            int id = item.getItemId();\r\n            if (id == R.id.action_delete) {\r\n                deleteInboxes();\r\n                mode.finish();\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        @Override\r\n        public void onDestroyActionMode(ActionMode mode) {\r\n            mAdapter.clearSelections();\r\n            mActionMode = null;\r\n            mAdapter.setActionMode(false);\r\n            mAdapter.notifyDataSetChanged();\r\n            Tools.setSystemBarColor(MainActivity.this, R.color.colorPrimary);\r\n        }\r\n    }\r\n\r\n    private void deleteInboxes() {\r\n        List<Integer> selectedItemPositions = mAdapter.getSelectedItems();\r\n        List<DrivingLog> drivingLogs = mAdapter.getItems();\r\n\r\n        for (int i = selectedItemPositions.size() - 1; i >= 0; i--) {\r\n            int selectedPos = selectedItemPositions.get(i);\r\n            mRealm.beginTransaction();\r\n            drivingLogs.get(selectedPos).deleteFromRealm();\r\n            mRealm.commitTransaction();\r\n            mAdapter.resetCurrentIndex();\r\n        }\r\n        mAdapter.notifyDataSetChanged();\r\n    }\r\n\r\n    public Location getLastKnownLocation() {\r\n        if (ActivityCompat.checkSelfPermission(getApplicationContext(), permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED\r\n                && ActivityCompat.checkSelfPermission(getApplicationContext(), permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r\n\r\n            if (ActivityCompat.shouldShowRequestPermissionRationale(MainActivity.this, permission.ACCESS_FINE_LOCATION)\r\n                    && ActivityCompat.shouldShowRequestPermissionRationale(MainActivity.this, permission.ACCESS_COARSE_LOCATION)) {\r\n                ActivityCompat.requestPermissions(MainActivity.this, new String[]{permission.ACCESS_FINE_LOCATION, permission.ACCESS_COARSE_LOCATION}, 100);\r\n//                    return;\r\n            } else {\r\n                ActivityCompat.requestPermissions(MainActivity.this, new String[]{permission.ACCESS_FINE_LOCATION, permission.ACCESS_COARSE_LOCATION}, 100);\r\n//                    return;\r\n            }\r\n\r\n        }\r\n\r\n//        FusedLocationProviderClient fusedLocationClient = LocationServices.getFusedLocationProviderClient(this);\r\n//        fusedLocationClient.getLastLocation();\r\n\r\n\r\n        mLocationManager = (LocationManager) getApplicationContext().getSystemService(LOCATION_SERVICE);\r\n        List<String> providers = mLocationManager.getProviders(true);\r\n        Location bestLocation = null;\r\n        for (String provider : providers) {\r\n            Location l = mLocationManager.getLastKnownLocation(provider);\r\n            if (l == null) {\r\n                continue;\r\n            }\r\n            if (bestLocation == null || l.getAccuracy() < bestLocation.getAccuracy()) {\r\n                // Found best last known location: %s\", l);\r\n                bestLocation = l;\r\n            }\r\n        }\r\n        Log.d(TAG, String.valueOf(bestLocation));\r\n        return bestLocation;\r\n    }\r\n\r\n    private void setStartLocation() {\r\n        Location lastKnownLocation = getLastKnownLocation();\r\n        double latitude, longitude;\r\n        Date date;\r\n        try {\r\n            latitude = lastKnownLocation.getLatitude();\r\n            longitude = lastKnownLocation.getLongitude();\r\n            date = new Date(lastKnownLocation.getTime());\r\n            mDrivingLog.setStartLatitude(latitude);\r\n            mDrivingLog.setStartLongitude(longitude);\r\n            mDrivingLog.setStartDate(date);\r\n        } catch (Exception e) {\r\n            date = new Date();\r\n            mDrivingLog.setStartLatitude(0);\r\n            mDrivingLog.setStartLongitude(0);\r\n            mDrivingLog.setStartDate(date);\r\n            e.printStackTrace();\r\n        }\r\n\r\n        Number currentIdNum = mRealm.where(DrivingLog.class).max(\"id\");\r\n        int nextId;\r\n        if (currentIdNum == null) {\r\n            nextId = 1;\r\n        } else {\r\n            nextId = currentIdNum.intValue() + 1;\r\n        }\r\n\r\n        mDrivingLog.setId(nextId);\r\n    }\r\n\r\n    private void createLocationRequest() {\r\n        mLocationRequest = new LocationRequest();\r\n        mLocationRequest.setInterval(UPDATE_INTERVAL);\r\n        mLocationRequest.setFastestInterval(FASTEST_UPDATE_INTERVAL);\r\n        mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);\r\n        mLocationRequest.setMaxWaitTime(MAX_WAIT_TIME);\r\n    }\r\n\r\n    private PendingIntent getPendingIntent() {\r\n        Intent intent = new Intent(this, LocationUpdatesBroadcastReceiver.class);\r\n        intent.setAction(LocationUpdatesBroadcastReceiver.ACTION_PROCESS_UPDATES);\r\n        return PendingIntent.getBroadcast(this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/traveldriving/activity/MainActivity.java	(revision f92aef77244af70e78f115aa9e503ea3cb4bfc78)
+++ app/src/main/java/com/example/traveldriving/activity/MainActivity.java	(date 1603241116362)
@@ -105,6 +105,7 @@
     protected void onResume() {
         super.onResume();
         Log.d(TAG, "onResume");
+        Log.d(TAG, String.valueOf(mMapPoints));
 
         if (timerBroadcastReceiver == null) {
             timerBroadcastReceiver = new BroadcastReceiver() {
